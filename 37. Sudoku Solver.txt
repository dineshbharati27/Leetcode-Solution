//37. Sudoku Solver

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    public boolean solve(char[][] board){
        int row = -1;
        int col = -1;
        boolean isEmpty = true;
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                if(board[i][j] == '.'){
                    row = i;
                    col = j;
                    isEmpty = false;
                    break;
                }
            }
            if(!isEmpty) break;
        }
        if(isEmpty) return true;
        for(int num = 1; num <= board.length; num++){
            char ch = (char)('0'+num);
            if(isSafe(board, row, col, ch)){
                board[row][col] = ch;
                if(solve(board)) return true;
                board[row][col] = '.';
            }
        }
        return false;
    }

    public boolean isSafe(char[][] board, int row , int col, char num){
        for(int i = 0; i<board.length; i++){
            if(board[row][i]==num){
                return false;
            }
        }

        for(int i = 0; i<board.length; i++){
            if(board[i][col]==num){
                return false;
            }
        }

        int sqrt = (int)(Math.sqrt(board.length));
        int startrow = row - row%sqrt;
        int startcol = col - col%sqrt;
        for(int i = 0; i < sqrt ; i++){
            for(int j = 0; j < sqrt;  j++){
                if(board[startrow + i][startcol + j] == num){
                    return false;
                }
            }
        }

        return true;
    }
}