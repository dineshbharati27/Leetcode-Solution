//75. Sort Colors
      // Selection Sort is used
class Solution {
    public void sortColors(int[] nums) {
        for(int i = 0; i<nums.length-1 ;i++){
            for(int j = i+1 ;j<nums.length; j++){
                if(nums[i]>nums[j]){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
        }
        System.out.println(nums);
    }
}


//optimize approach 
     // Quick sort is used
class Solution {
    public void sortColors(int[] nums) {
        quicksort(nums,0,nums.length-1);
    }

    public static void quicksort(int[] arr,int low,int high){
        if(low<high){
            int p = partition(arr,low,high);
            quicksort(arr,low,p-1);
            quicksort(arr,p+1,high);
        }
    }

    public static int partition(int[] arr,int low,int high){
        int pivot = arr[high];
        int i = low -1;

        for(int j =low; j<high; j++){
            if(arr[j]<pivot){
                i++;
                swap(arr,i,j);
            }
        }
        swap(arr,i+1,high);
        return i+1;
    }

    public static void swap(int[] arr,int i,int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}