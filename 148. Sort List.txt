//148. Sort List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head){
        if(head == null || head.next == null) return head;

        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return mergeTwoLists(left, right);
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head = new ListNode();
        ListNode end = head;
        while(list1 != null && list2!= null){
            if(list1.val < list2.val){
                end.next = list1;
                list1 = list1.next;
            }
            else{
                end.next = list2;
                list2 = list2.next;
            }
            end = end.next;
        }
        end.next = (list1 != null) ? list1 : list2;
        return head.next;
    }

    public ListNode getMid(ListNode head){
        ListNode previous = null;
        ListNode dummyhead = head;
        while(dummyhead != null && dummyhead.next != null){
            previous = (previous == null) ? dummyhead : previous.next;
            dummyhead = dummyhead.next.next;
        }
        ListNode mid = previous.next;
        previous.next = null;
        return mid;
    }
}