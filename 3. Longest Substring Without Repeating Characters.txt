//3. Longest Substring Without Repeating Characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 1) return 1;
        Set set = new HashSet();
        int count = 0;
        for(int i = 0; i<s.length(); i++){
            for(int j = i; j<s.length(); j++){
                char ch = s.charAt(j);
                if(!set.add(ch)){
                    if(set.size()>count) count = set.size();
                    set.clear();
                    break;
                }
            }
            if(s.length()-i < set.size()) break;
        }
        return count;
    }
}



// Optimize Approach

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();

        int i = 0;
        int j = 0; 
        int len = 0;
        while(i<s.length()){
            char ch = s.charAt(i);
            if(!set.contains(ch)){
                set.add(ch);
                len = Math.max(i-j+1,len);
                i++;
            }
            else{
                while(set.contains(ch)){
                    set.remove(s.charAt(j));
                    j++;
                }
            }
        }
        return len;
    }
}