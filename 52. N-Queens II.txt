//52. N-Queens II

class Solution {
    public int totalNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        
        // Initialize the board with '.'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        
        solveBacktracking(board, 0, result);
        return result.size();
    }

    private static void solveBacktracking(char[][] board, int column, List<List<String>> result) {
        if (column == board.length) {
            List<String> solution = new ArrayList<>();
            for (int i = 0; i < board.length; i++) {
                solution.add(new String(board[i]));
            }
            result.add(solution);
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (isSafe(board, row, column)) {
                board[row][column] = 'Q';
                solveBacktracking(board, column + 1, result);
                board[row][column] = '.';
            }
        }
    }

    private static boolean isSafe(char[][] board, int row, int column) {
        for (int i = 0; i < column; i++) {
            if (board[row][i] == 'Q') {
                return false;
            }
        }

        for (int i = row - 1, j = column - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        for (int i = row + 1, j = column - 1; i < board.length && j >= 0; i++, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

}