//2418. Sort the People

class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // bubble sort used 
        for(int i = 0; i< names.length; i++){
            boolean didSwap = false;
            for(int j = 0; j< names.length-i-1; j++){
                if(heights[j]<heights[j+1]){
                    int temp = heights[j];
                    heights[j] = heights[j+1];
                    heights[j+1]= temp;

                    String temp1 = names[j];
                    names[j] = names[j+1];
                    names[j+1] = temp1;
                    didSwap = true;
                }
            }
            if(!didSwap) break;
        }
        return names;
    }
}



//Optimize approach -------->
//HashMap and QuickSort is used
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        HashMap<Integer, String> map = new HashMap<>();
        for(int i = 0; i< names.length; i++){
            map.put(heights[i],names[i]);
        }

        quickSort(heights,0,heights.length-1);
        String result[] = new String[heights.length];
        int j =0;
        for(int i = heights.length-1;i>=0;i--){
            result[j] = map.get(heights[i]);
            j++;
        }
       return result;
    }

    public void quickSort(int[] arr, int low, int high){
        if(low<high){
            int pivot = partition(arr, low, high);
            quickSort(arr, low, pivot-1);
            quickSort(arr, pivot+1, high);
        }
    }

    public static int partition(int[] arr, int low, int high){
        int i = low -1;
        int pivot = arr[high];
        for(int j = low; j<high; j++){
            if(arr[j]<pivot){
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;

        return i+1;
    }
}