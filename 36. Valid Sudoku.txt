//36. Valid Sudoku

class Solution {
    public boolean isValidSudoku(char[][] board) {
        for(int row = 0; row < board.length; row++){
            for(int col = 0; col < board.length; col++){ 
                if(board[row][col] != '.'){
                    char num = board[row][col];
                    board[row][col] = '.';
                    if(!isSafe(board,row,col,num)) return false;
                    board[row][col] = num;
                }
                else{
                    continue;
                }   
            }
        }
        return true;
    }

    public boolean isSafe(char[][] board, int row , int col, char num){
        for(int i = 0; i<board.length; i++){
            if(i==col) continue;
            if(board[row][i]==num){
                return false;
            }
        }

        for(int i = 0; i<board.length; i++){
            if(i==row) continue;
            if(board[i][col]==num){
                return false;
            }
        }

        int sqrt = (int)(Math.sqrt(board.length));
        int startrow = row - row%sqrt;
        int startcol = col - col%sqrt;
        for(int i = 0; i < sqrt ; i++){
            for(int j = 0; j < sqrt;  j++){
                if((startrow+i) == row && (startcol+j) == col) continue;
                if(board[startrow + i][startcol + j] == num){
                    return false;
                }
            }
        }

        return true;
    }
}