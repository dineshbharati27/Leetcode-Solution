//32. Longest Valid Parentheses

class Solution {
    public int longestValidParentheses(String s) {
        if(s.length()==0){
            return 0;
        }
        Stack<Integer> stack = new Stack<>();
        int result = 0;
        stack.push(-1);
        for(int i = 0 ; i<s.length();i++){
            if(s.charAt(i) == '('){
                stack.push(i);
            }
            else{
                stack.pop();
                if(stack.isEmpty()){
                    stack.push(i);
                }
                else{
                    int len = i - stack.peek();
                    result = Math.max(result,len);
                }
            }
        }
        return result;
        
    }
}


//optimise approach

class Solution {
    public int longestValidParentheses(String s) {
        if(s.length()==0){
            return 0;
        }
        int result = 0;
        int open = 0;
        int close = 0;
        int len = 0;
        for(int i =0 ; i<s.length(); i++){
            if(s.charAt(i)=='(')
                open++;
            else
                close++;
            if(open == close){
                len = open+close;
                result = Math.max(result,len);
            }
            else if(close > open)
                open = close = 0;
        }

        open = close = 0;

        for(int i =s.length()-1 ; i>=0; i--){
            if(s.charAt(i)=='(')
                open++;
            else
                close++;
            if(open == close){
                len = open+close;
                result = Math.max(result,len);
            }
            else if(close < open)
                open = close = 0;
        }
        return result;
    }
}